@startuml ds - POST 8081 analyzeProject
title Sequence Diagram POST 8081/analyzeProject - Analyze the content of multiple Java files
skinparam style strictuml

participant "app:FastAPI" as app
participant ":analysis_router" as analysis_router
participant ":analysis_service" as analysis_service
participant ":run_model" as run_model
participant ":os" as os

note left of shared_volume
    Shared volume accessible to
    //PFE/services/service_model_creation//
    and to //PFE/services/service_ai_analysis//.
end note

-> app : POST 8081/analyzeProject(\n   JSON body ProjectAnalysis {\n      gitUrl,\n      files\n   }\n)
app -> analysis_router : predict_project_req({url, files})
analysis_router -> analysis_service : analyze_project()

analysis_service -> analysis_service : //project_name// extracted from github_url\n//output_dir// = "/host_folder" + //project_name// + "_project"
analysis_service -> os : makedirs(output_dir)
analysis_service -> analysis_service : //project_path// = //output_dir// + //project_name//

analysis_service -> "results:[]" as results **: Create an empty list

loop For each file in files
    analysis_service -> "tmp:tempfile" as tmp ** : NamedTemporaryFile\n(create a temporary file)

    analysis_service -> tmp : writeFile(file.content)

    analysis_service -> analysis_service : //filepath// = //output_dir// + //tmp.name//

    analysis_service -> run_model : predict(//project_path//, //filepath//)
    run_model -> shared_volume : Uses //project_path// and //filepath// to access\n the AI model and analyze the file content.

    shared_volume --> run_model : result {density, blocks, predictedDensity}
    run_model --> analysis_service : prediction_result = result
    
    analysis_service -> "processed_result\n:JSON object" ** : {\n   "url": file.url,\n   "density": prediction_result.density, \n   "predictedDensity": prediction_result.predictedDensity\n   "difference": abs(prediction_result.density - prediction_result.predictedDensity)\n}
    analysis_service -> results : append(processed_result)
end loop

analysis_service --> analysis_router : results
analysis_router --> app : results
<-- app : results

participant ":run_model" as run_model
participant "services_training_data\n:Shared Volume" as shared_volume
@enduml
