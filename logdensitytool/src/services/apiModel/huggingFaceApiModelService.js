const { post, get } = require('../../utils/api');
const ApiModel = require('./apiModelService');

class HuggingFaceApiModel extends ApiModel {

  constructor(url, port, initialModel, initialToken) {
    super(url, port, initialModel, initialToken);
  }

  /**
   * Returns api ID
   * @returns string of apiId
   */
  static get apiId() {
    return "huggingface"
  }
  
  /**
   * Generates a response or output based on the provided input data.
   * @param {string} model - The name of the model to use.
   * @param {string} system - The system context for the generation.
   * @param {string} prompt - The input prompt for the model.
   * @param {string} temperature - Temperature of model response.
   * @param {string} max_token - Max tokens generated by model for response.
   * @returns {string} Model response
   */
  async generate(model, system, prompt, temperature, max_token) {

    this.checkReady()

    try {
      let usedTokens = 128 // (Default: 128, -1 = infinite generation, -2 = fill context)
      if (max_token !=null && max_token >= -2) usedTokens = max_token

      let usedTemp = 0.8 // (Default: 0.8) value between 0 and 1. Increasing the temperature will make the model answer more creatively. 
      if (temperature !=null && temperature >= 0 && temperature <= 1 ) usedTemp = temperature
      
      const response = await post(this.url, this.port, '/predict', {
        model: model, // Not implemented
        prompt: this.buildPrompt(system, prompt), 
        max_new_tokens: usedTokens, 
        temperature: usedTemp // Not implemented
      }) 
      return response.data.content;
    } catch (error) {
      throw error; // Re-throw the error to propagate it upwards
    }
  }

  /**
   * Changes the model being used.
   * @param {string} modelId - The name of the new model.
   * @returns {completed: boolean, model: string} completed, true if model changed, false if not, model, indicate the model configured
   */
  async changeModel(modelId) {
    const response = await post(this.url, this.port, '/change_model', {hf_model_id: modelId})
    this.model = modelId
    return {completed: response.data.completed, model: response.data.model_name}
  }
  
  /**
   * Retrieves information about the models loaded.
   * @returns {model: string|list} list of models or string
   */
  async info() {
    const response = await get(this.url, this.port, '/model_info', null)
    return {model: response.data.model_name}
  }

  /**
   * Get current configured
   * @returns {model: string} Model configured
   */
  async getModel() {
    const response = await get(this.url, this.port, '/model_info', null)
    if (response.data.hasOwnProperty('model_name')) {
        return response.data.model_name
    } else 
        return this.model
  }

  /**
   * Updates the token used for authentication or API access.
   * @param {string} token - The new token string.
   * @returns {completed: boolean} completed, true if model changed, false if not
   */
  async changeToken(token) {
    this.token = token
    const response = await post(this.url, this.port, '/change_token', {hf_token: this.token})
    return {completed: response.data.completed, message: ""}
  }

  buildPrompt(context, prompt) {
    return `[INST]CONTEXT: ${context}\n\nINPUT: ${prompt} [/INTS]`
  }
}

module.exports = HuggingFaceApiModel;
